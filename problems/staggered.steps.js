// To climb N steps taking ( 1/2 ) steps at a time
function findSteps(n) {
	if (n == 0 || n == 1) {
		return 1;
	}

	if (n == 2) {
		return 2;
	}

	return findSteps(n - 2) + findSteps(n - 1);
}

// To climb N steps taking ( 1/2/3 ) steps at a time
function countSteps(n, diffSteps) {
	var res = [];
	res[0] = 1;
	res[1] = 1;
	res[2] = 2;

	if (n > 2) {
		for (i = 3; i <= n; i++) {
			res[i] = 0;
			for (var j = 1; j <= diffSteps.length; j++) {
				console.log('i,j', i, j);
				if (i >= j) {
					res[i] += res[i - j];
				}
			}
		}
	}
	console.log('res', res);
	return res[n];
}

/*
[1,2]
0 => 1
1 => 1 ([1])
2 => 2 ([1,1], [2])
3 => 3 ([1,1,1], [1,2], [2,1])
4 => 5 ([1,1,1,1], [1,1, 2], [1,2,1], [2,1,2], [2,2])
5 => 8 ([1,1,1,1,1], [1,1,1,2], [1,1,2,1], [1,2,1,1], [2,1,1,1], [2,1,2], [1,2,2], [2,2,1])
//Fibonaci seriies
//findSteps(n - 2) + findSteps(n - 1);

[1,2,3]
0 => 1
1 => 1 ([1])
2 => 2 ([1,1], [2])
3 => 4 ([1,1,1], [1,2], [2,1], [3])
4 => 7 ([1,1,1,1], [1,1,2], [1,2,1], [2,1,2], [2,2], [1,3], [3,1])
5 => 13 ([1,1,1,1,1], [1,1,1,2], [1,1,2,1], [1,2,1,1], [1,2,2], [1,1,3], [1,3,1], [2,1,1,1], [2,1,2], [2,2,1], [2,3], [3,2], [3,1,1])
countSteps(n - 3) + countSteps(n - 2) + countSteps(n - 1)

[1,2,3,4]
0 => 1
1 => 1 ([1])
2 => 2 ([1,1], [2])
3 => 4 ([1,1,1], [1,2], [2,1], [3])
4 => 8 ([1,1,1,1], [1,1,2], [1,2,1], [2,1,2], [2,2], [1,3], [3,1], [4])
5 => 15 ([1,1,1,1,1], [1,1,1,2], [1,1,2,1], [1,2,1,1], [1,2,2], [1,1,3], [1,3,1], [2,1,1,1], [2,1,2], [2,2,1], [2,3], [3,2], [3,1,1], [1,4], [4,1])

countSteps(n - 4) + countSteps(n - 3) + countSteps(n - 2) + countSteps(n - 1)

*/
